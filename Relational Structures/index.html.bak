<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cellular Painting Network</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <style>
        :root {
            --primary-bg: #0a0a1a;
            --card-bg: rgba(20, 20, 40, 0.9);
            --text-color: #e0e0e0;
            --text-muted: #a0a0c0;
            --accent-1: #ff6b9f;
            --accent-2: #4ecdc4;
            --accent-3: #45b7d1;
            --accent-4: #96ceb4;
            --accent-5: #ffd166;
            --shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            --transition: all 0.3s ease-in-out;
            --blur: 20px;
            --border-color: rgba(255, 255, 255, 0.1);
        }
        
        /* Cellular background with subtle pattern */
        .fluid-bg {
            position: fixed;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
            z-index: -1;
            background: radial-gradient(circle at 50% 50%, #0a0a1a 0%, #000000 100%);
            opacity: 1;
            overflow: hidden;
        }
        
        .fluid-bg::before {
            content: '';
            position: absolute;
            width: 200%;
            height: 200%;
            top: -50%;
            left: -50%;
            background-image: 
                radial-gradient(circle at 10% 20%, rgba(78, 205, 196, 0.05) 0%, transparent 20%),
                radial-gradient(circle at 90% 80%, rgba(255, 107, 159, 0.05) 0%, transparent 20%),
                radial-gradient(circle at 30% 60%, rgba(69, 183, 209, 0.05) 0%, transparent 25%);
            animation: float 30s ease-in-out infinite;
        }
        
        /* Pixel art pattern */
        @keyframes pixelMove {
            0% { background-position: 0 0; }
            100% { background-position: 40px 40px; }
        }
        
        @keyframes float {
            0%, 100% { transform: translateY(0) rotate(0deg); }
            50% { transform: translateY(-10px) rotate(2deg); }
        }
        
        @keyframes pulse {
            0%, 100% { opacity: 0.2; }
            50% { opacity: 0.4; }
        }
        
        body {
            font-family: 'Poppins', sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--primary-bg);
            color: var(--text-color);
            line-height: 1.6;
            overflow-x: hidden;
            min-height: 100vh;
        }
        
        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: 
                /* Subtle grid pattern */
                linear-gradient(90deg, rgba(0,0,0,0.02) 1px, transparent 1px) 0 0 / 20px 20px,
                linear-gradient(rgba(0,0,0,0.02) 1px, transparent 1px) 0 0 / 20px 20px,
                /* Diagonal pattern */
                linear-gradient(45deg, rgba(0,0,0,0.02) 25%, transparent 25%, transparent 75%, rgba(0,0,0,0.02) 75%),
                linear-gradient(45deg, rgba(0,0,0,0.02) 25%, transparent 25%, transparent 75%, rgba(0,0,0,0.02) 75%);
            background-size: 40px 40px, 40px 40px, 20px 20px, 20px 20px;
            background-position: 0 0, 0 0, 0 0, 10px 10px;
            animation: pixelMove 120s linear infinite;
            opacity: 0.4;
            z-index: -2;
            pointer-events: none;
        }
        
        /* Floating pixel elements */
        
        /* Background styles */
        body {
            margin: 0;
            padding: 0;
            overflow-x: hidden;
            font-family: 'Poppins', sans-serif;
            color: var(--text-color);
            background: var(--primary-bg);
            min-height: 100vh;
        }
        
        .title-panel {
            background: linear-gradient(135deg, #4a6cf7 0%, #2541b2 100%);
            color: white;
            padding: 1.5rem 2rem;
            border-radius: 0 0 15px 15px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            position: sticky;
            top: 0;
            z-index: 1000;
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
            box-sizing: border-box;
        }
        
        .title-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 30px;
            position: relative;
            z-index: 2;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .title-text {
            flex: 1;
        }
        
        .menu-container {
            position: relative;
            display: inline-block;
        }
        
        .menu-button {
            color: white;
            text-decoration: none;
            font-size: 1rem;
            display: flex;
            align-items: center;
            gap: 8px;
            background: rgba(255, 255, 255, 0.15);
            padding: 8px 16px;
            border-radius: 20px;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.2);
            cursor: pointer;
            font-family: 'Poppins', sans-serif;
        }
        
        .menu-button:hover {
            background: rgba(255, 255, 255, 0.25);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }
        
        .dropdown-content {
            display: none;
            position: absolute;
            right: 0;
            background: rgba(255, 255, 255, 0.98);
            min-width: 220px;
            border-radius: 12px;
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            overflow: hidden;
            margin-top: 10px;
            opacity: 0;
            transform: translateY(-10px);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }
        
        .menu-container:hover .dropdown-content {
            display: block;
            opacity: 1;
            transform: translateY(0);
        }
        
        .dropdown-content a {
            color: #2d3436;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            transition: all 0.2s ease;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }
        
        .dropdown-content a:last-child {
            border-bottom: none;
        }
        
        .dropdown-content a:hover {
            background: #f8f9ff;
            color: #4a6cf7;
            padding-left: 20px;
        }
        
        .menu-icon {
            transition: transform 0.3s ease;
        }
        
        .menu-container:hover .menu-icon {
            transform: rotate(180deg);
        }
        
        .title-panel h1 {
            margin: 0;
            font-size: 2.5rem;
            font-weight: 700;
            letter-spacing: -0.5px;
            margin-bottom: 0.5rem;
        }
        
        .subtitle {
            margin: 0;
            font-size: 1.2rem;
            color: var(--text-muted);
            margin-top: 10px;
            font-weight: 400;
            max-width: 800px;
            margin-left: auto;
            margin-right: auto;
            line-height: 1.6;
        }
        
        .title-gradient {
            position: absolute;
            top: 0;
            right: 0;
            bottom: 0;
            width: 40%;
            background: linear-gradient(90deg, rgba(74,108,247,0) 0%, rgba(37,65,178,0.8) 100%);
            z-index: 1;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: var(--card-bg);
            border-radius: 12px;
            box-shadow: var(--shadow);
            margin-top: 30px;
            margin-bottom: 30px;
            border: 1px solid var(--border-color);
        }
        
        .controls {
            text-align: center;
            margin-bottom: 30px;
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 12px;
        }
        
        button {
            background: linear-gradient(135deg, var(--accent-1), var(--accent-5));
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-family: 'Poppins', sans-serif;
            font-weight: 500;
            font-size: 0.95rem;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
            position: relative;
            overflow: hidden;
            z-index: 1;
        }
        
        button::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(135deg, var(--accent-5), var(--accent-1));
            opacity: 0;
            transition: opacity 0.3s ease;
            z-index: -1;
        }
        
        button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
        }
        
        button:hover::before {
            opacity: 1;
        }
        
        button:active {
            transform: translateY(0);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }
        
        /* Style for the second button */
        button:nth-child(2) {
            background: linear-gradient(135deg, var(--accent-3), #ff2d75);
        }
        
        button:nth-child(2)::before {
            background: linear-gradient(135deg, #ff2d75, var(--accent-3));
        }
        
        /* Style for the third button */
        button:nth-child(3) {
            background: linear-gradient(135deg, var(--accent-4), #ff9a44);
        }
        
        button:nth-child(3)::before {
            background: linear-gradient(135deg, #ff9a44, var(--accent-4));
        }
        
        .legend-item {
            display: flex;
            align-items: center;
            margin-bottom: 8px;
            padding: 5px 10px;
            border-radius: 6px;
            transition: var(--transition);
            background: rgba(255, 255, 255, 0.05);
        }
        
        .legend-item:hover {
            background: rgba(255, 255, 255, 0.1);
            transform: translateX(5px);
        }
        
        .legend-color {
            width: 24px;
            height: 24px;
            border-radius: 6px;
            margin-right: 12px;
            position: relative;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .info {
            text-align: center;
            font-size: 14px;
            color: var(--text-muted);
            font-weight: 400;
            margin-top: 30px;
            padding: 15px;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 8px;
            border-left: 3px solid var(--accent-1);
        }
        
        /* Voxel node styling */
        .node circle {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            filter: 
                drop-shadow(2px 2px 0 rgba(0, 0, 0, 0.2))
                drop-shadow(-1px -1px 0 rgba(255, 255, 255, 0.3));
            clip-path: polygon(
                25% 0%, 75% 0%, 100% 25%, 100% 75%, 75% 100%, 25% 100%, 0% 75%, 0% 25%
            );
            transform: rotate(45deg) scale(0.8);
        }
        
        .node circle:hover {
            transform: rotate(45deg) scale(1);
            filter: 
                drop-shadow(3px 3px 0 rgba(0, 0, 0, 0.25))
                drop-shadow(-2px -2px 0 rgba(255, 255, 255, 0.4));
        }
        
        .link {
            transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            stroke-opacity: 0.4;
        }
        
        .link:hover {
            stroke-opacity: 0.8;
            stroke-width: 3px;
        }
        
        /* Voxel pulse animation */
        @keyframes voxelPulse {
            0%, 100% { 
                transform: rotate(45deg) scale(0.8); 
                filter: 
                    drop-shadow(2px 2px 0 rgba(0, 0, 0, 0.2))
                    drop-shadow(-1px -1px 0 rgba(255, 255, 255, 0.3));
            }
            50% { 
                transform: rotate(45deg) scale(0.9);
                filter: 
                    drop-shadow(3px 3px 0 rgba(0, 0, 0, 0.25))
                    drop-shadow(-2px -2px 0 rgba(255, 255, 255, 0.4));
            }
        }
        
        .node circle {
            animation: voxelPulse 6s infinite ease-in-out;
        }
        
        .node:nth-child(4n) circle {
            animation-delay: 0s;
            clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%);
            transform: rotate(0deg) scale(0.8);
        }
        
        .node:nth-child(4n+1) circle {
            animation-delay: 1.5s;
            clip-path: polygon(0 0, 100% 0%, 100% 75%, 75% 75%, 75% 100%, 0 100%);
            transform: rotate(0deg) scale(0.8);
        }
        
        .node:nth-child(4n+2) circle {
            animation-delay: 3s;
            clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%);
            transform: rotate(0deg) scale(0.8);
        }
        
        .node:nth-child(4n+3) circle {
            animation-delay: 4.5s;
            clip-path: polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%);
            transform: rotate(0deg) scale(0.8);
        }
        
        /* Responsive adjustments */
        @media (max-width: 768px) {
            .container {
                padding: 20px;
                border-radius: 16px;
            }
            
            h1 {
                font-size: 2em;
                margin-bottom: 20px;
            }
            
            .controls {
                gap: 8px;
            }
            
            button {
                padding: 10px 16px;
                font-size: 13px;
            }
            
            .network-container {
                padding: 15px;
                border-radius: 16px;
            }
        }
    </style>
</head>
<body>
    <!-- Simplified fluid background -->
    <div class="fluid-bg"></div>
    
    <!-- Title Panel -->
    <div class="title-panel">
        <div class="title-content">
            <h1>Cellular Painting Network</h1>
            <p class="subtitle">Visualizing emotional relationships through cellular structures</p>
        </div>
        
        <div class="menu-container">
            <button class="menu-button" id="menuButton">
                <span class="menu-icon">☰</span>
                <span class="menu-text">Menu</span>
            </button>
            
            <div class="dropdown-content" id="dropdownContent">
                <a href="../index.html">Home</a>
                <a href="../Temporal Structures/index.html">Temporal Structures</a>
                <a href="../Geospatial Structures/index.html">Geospatial Structures</a>
                <a href="../Engagement Components/index.html">Engagement Components</a>
                <a href="#about">About</a>
            </div>
        </div>
    </div>
    
    <div class="container">
        <div id="network"></div>
        
        <div class="controls">
            <button onclick="restartSimulation()">
                <span class="button-icon">🔄</span>
                <span class="button-text">Restart Animation</span>
            </button>
            <button onclick="toggleLabels()">
                <span class="button-icon">🏷️</span>
                <span class="button-text">Toggle Labels</span>
            </button>
            <button onclick="toggleLinks()">
                <span class="button-icon">🔗</span>
                <span class="button-text">Toggle Links</span>
            </button>
        </div>
        
        <div class="legend">
            <h3>Emotion Categories</h3>
            <div id="legend-items">
                <div class="legend-item">
                    <span class="legend-color" style="background: linear-gradient(to right, #FFD700, #FFA500);"></span>
                    <span class="legend-label">Happiness</span>
                </div>
                <div class="legend-item">
                    <span class="legend-color" style="background: linear-gradient(to right, #1E90FF, #00008B);"></span>
                    <span class="legend-label">Sadness</span>
                </div>
                <div class="legend-item">
                    <span class="legend-color" style="background: linear-gradient(to right, #FF4500, #8B0000);"></span>
                    <span class="legend-label">Anger</span>
                </div>
                <div class="legend-item">
                    <span class="legend-color" style="background: linear-gradient(to right, #9932CC, #4B0082);"></span>
                    <span class="legend-label">Fear</span>
                </div>
            </div>
        </div>
        
        <div class="info">
            <p>Interact with the cellular network by clicking and dragging nodes. Hover to see connections.</p>
            <p>Intensity of color represents emotional strength.</p>
        </div>
    </div>
    

    <script>

        
        // Emoji mapping for different color categories
        const emojiMap = {
            // Red hues (0-30°)
            'red': '❤️',
            // Orange/Yellow hues (30-90°)
            'orange': '🍊',
            'yellow': '⭐',
            // Green hues (90-180°)
            'green': '🌿',
            // Blue hues (180-240°)
            'blue': '💧',
            // Purple/Pink hues (240-360°)
            'purple': '🌸',
            'pink': '🎀',
            // Special emoji for connections
            'hue': '🔗',
            'synonym': '🔄'
        };

        // Color dataset with hue values, comprehensive real-life examples, and synonyms
        const colorData = [
            { name: "Crimson", hex: "#dc143c", hue: 348, emoji: '❤️', examples: ["Ripe cherries", "Rose petals", "Fire truck", "Apple skin", "Red wine", "Cranberries", "Valentine's roses", "Stop sign"], synonyms: ["Deep Red", "Blood Red", "Cherry Red"] },
            { name: "Scarlet", hex: "#ff2400", hue: 8, emoji: '🍒', examples: ["Strawberries", "Cardinal bird", "Red lipstick", "Tomatoes", "Red peppers", "Ladybug", "Fire engine", "Red maple leaves"], synonyms: ["Bright Red", "Fire Red", "Vermillion"] },
            { name: "Coral", hex: "#ff7f50", hue: 16, emoji: '🦩', examples: ["Coral reef", "Sunset clouds", "Peach fruit", "Salmon flesh", "Papaya", "Hibiscus flower", "Flamingo feathers", "Terracotta pots"], synonyms: ["Salmon", "Peach", "Apricot"] },
            { name: "Orange", hex: "#ffa500", hue: 39, emoji: '🍊', examples: ["Orange fruit", "Autumn leaves", "Basketball", "Pumpkin", "Carrot", "Tiger fur", "Traffic cones", "Monarch butterfly"], synonyms: ["Amber", "Burnt Orange", "Rust"] },
            { name: "Tangerine", hex: "#ff8c00", hue: 33, examples: ["Tangerine fruit", "Marigold flowers", "Safety cone", "Persimmon", "Orange bell pepper", "Goldfish", "Sunset", "Clementine"], synonyms: ["Mandarin", "Pumpkin Orange", "Flame"] },
            { name: "Gold", hex: "#ffd700", hue: 51, examples: ["Gold jewelry", "Sunflower petals", "Honey", "Corn kernels", "Banana peel", "Wheat fields", "Golden retriever", "Daffodils"], synonyms: ["Golden Yellow", "Amber", "Honey"] },
            { name: "Yellow", hex: "#ffff00", hue: 60, emoji: '⭐', examples: ["Lemon", "Taxi cab", "Banana", "Sunflower center", "Butter", "Canary bird", "School bus", "Corn on the cob"], synonyms: ["Lemon Yellow", "Canary", "Sunshine"] },
            { name: "Chartreuse", hex: "#7fff00", hue: 90, emoji: '🍏', examples: ["Tennis ball", "Lime zest", "Spring leaves", "Green apple", "Kiwi fruit", "Parrot feathers", "Highlighter", "Young grass"], synonyms: ["Yellow Green", "Lime Green", "Electric Green"] },
            { name: "Lime", hex: "#32cd32", hue: 120, examples: ["Lime fruit", "Fresh grass", "Emerald gem", "Green grapes", "Basil leaves", "Tree frog", "Mint leaves", "Cucumber skin"], synonyms: ["Bright Green", "Vivid Green", "Spring Green"] },
            { name: "Forest Green", hex: "#228b22", hue: 120, examples: ["Pine trees", "Moss", "Jade stone", "Spinach", "Broccoli", "Evergreen needles", "Avocado skin", "Pickle"], synonyms: ["Dark Green", "Hunter Green", "Emerald"] },
            { name: "Teal", hex: "#008080", hue: 180, examples: ["Turquoise stone", "Peacock feathers", "Ocean water", "Duck egg", "Patina copper", "Eucalyptus leaves", "Teal duck", "Amazonite"], synonyms: ["Blue Green", "Turquoise", "Aqua"] },
            { name: "Cyan", hex: "#00ffff", hue: 180, emoji: '💧', examples: ["Swimming pool", "Tropical sea", "Aquamarine gem", "Blue raspberry", "Iceberg", "Bluebird egg", "Toothpaste", "Mouthwash"], synonyms: ["Aqua", "Electric Blue", "Bright Turquoise"] },
            { name: "Sky Blue", hex: "#87ceeb", hue: 197, emoji: '🌐', examples: ["Clear sky", "Robin's egg", "Sapphire", "Forget-me-not", "Blue jay", "Cornflower", "Baby boy items", "Bluebell flower"], synonyms: ["Light Blue", "Baby Blue", "Powder Blue"] },
            { name: "Royal Blue", hex: "#4169e1", hue: 225, emoji: '🔵', examples: ["Royal robe", "Bluebird", "Denim jeans", "Blue iris", "Cobalt glass", "Police uniform", "Smurf", "Blue morpho butterfly"], synonyms: ["Cobalt Blue", "True Blue", "Imperial Blue"] },
            { name: "Navy", hex: "#000080", hue: 240, examples: ["Navy uniform", "Midnight sky", "Blueberry", "Dark denim", "Sapphire", "Night ocean", "Blackberry", "Formal suit"], synonyms: ["Dark Blue", "Midnight Blue", "Deep Blue"] },
            { name: "Indigo", hex: "#4b0082", hue: 275, emoji: '🌀', examples: ["Indigo dye", "Eggplant", "Purple grapes", "Twilight sky", "Plum skin", "Blackcurrant", "Amethyst", "Violet flower"], synonyms: ["Blue Purple", "Deep Purple", "Violet"] },
            { name: "Purple", hex: "#800080", hue: 300, emoji: '🌸', examples: ["Amethyst crystal", "Lavender flowers", "Plum fruit", "Purple cabbage", "Violet petals", "Grape juice", "Orchid", "Purple onion"], synonyms: ["Violet", "Plum", "Royal Purple"] },
            { name: "Magenta", hex: "#ff00ff", hue: 300, emoji: '🌸', examples: ["Fuchsia flower", "Pink flamingo", "Magenta ink", "Dragon fruit", "Bougainvillea", "Petunia", "Highlighter", "Party decorations"], synonyms: ["Fuchsia", "Hot Pink", "Electric Pink"] },
            { name: "Rose", hex: "#ff007f", hue: 330, examples: ["Rose flower", "Pink sunset", "Carnation", "Watermelon flesh", "Pink grapefruit", "Hibiscus", "Raspberry", "Strawberry milk"], synonyms: ["Pink", "Blush", "Dusty Rose"] },
            { name: "Hot Pink", hex: "#ff69b4", hue: 330, emoji: '🎀', examples: ["Pink flamingo", "Bubble gum", "Cherry blossom", "Cotton candy", "Pink roses", "Peony flower", "Barbie pink", "Watermelon interior"], synonyms: ["Bright Pink", "Neon Pink", "Bubble Gum Pink"] }
        ];

        // Create links based on hue similarity and synonym relationships
        function createLinks(nodes) {
            const links = [];
            const threshold = 60; // Hue difference threshold
            
            // Create hue-based connections (bidirectional)
            for (let i = 0; i < nodes.length; i++) {
                for (let j = i + 1; j < nodes.length; j++) {
                    const hue1 = nodes[i].hue;
                    const hue2 = nodes[j].hue;
                    
                    // Calculate hue difference considering circular nature (0-360)
                    let diff = Math.abs(hue1 - hue2);
                    if (diff > 180) diff = 360 - diff;
                    
                    if (diff < threshold) {
                        links.push({
                            source: i,
                            target: j,
                            strength: 1 - (diff / threshold),
                            type: 'hue',
                            bidirectional: true
                        });
                    }
                }
            }
            
            // Create synonym connections (unidirectional)
            nodes.forEach((node, sourceIndex) => {
                node.synonyms.forEach(synonym => {
                    // Find if any other node's name matches this synonym (case-insensitive)
                    const targetIndex = nodes.findIndex((targetNode, targetIdx) => 
                        targetIdx !== sourceIndex && 
                        targetNode.name.toLowerCase() === synonym.toLowerCase()
                    );
                    
                    if (targetIndex !== -1) {
                        links.push({
                            source: sourceIndex,
                            target: targetIndex,
                            strength: 0.8,
                            type: 'synonym',
                            bidirectional: false,
                            synonymName: synonym
                        });
                    }
                });
            });
            
            return links;
        }

        // Set up SVG
        const width = 1000;
        const height = 600;
        const svg = d3.select("#network")
            .append("svg")
            .attr("width", width)
            .attr("height", height);

        // Create gradient definitions
        const defs = svg.append("defs");
        colorData.forEach((color, i) => {
            const gradient = defs.append("radialGradient")
                .attr("id", `gradient-${i}`)
                .attr("cx", "50%")
                .attr("cy", "50%")
                .attr("r", "50%");
            
            gradient.append("stop")
                .attr("offset", "0%")
                .attr("stop-color", color.hex)
                .attr("stop-opacity", 1);
            
            gradient.append("stop")
                .attr("offset", "100%")
                .attr("stop-color", d3.color(color.hex).darker(1))
                .attr("stop-opacity", 0.8);
        });

        // Initialize data
        let nodes = colorData.map((d, i) => ({ ...d, id: i }));
        let links = createLinks(nodes);
        let showConnections = true;

        // Create tooltip
        const tooltip = d3.select("body").append("div")
            .attr("class", "tooltip");

        // Create simulation with adjusted forces for larger nodes
        let simulation = d3.forceSimulation(nodes)
            .force("link", d3.forceLink(links).id(d => d.id).distance(120).strength(d => d.strength)) // Increased from 80 to 120
            .force("charge", d3.forceManyBody().strength(-300)) // Increased from -200 to -300
            .force("center", d3.forceCenter(width / 2, height / 2))
            .force("collision", d3.forceCollide().radius(35)); // Increased from 25 to 35

        // Create voxel-style links
        const linkElements = svg.append("g")
            .attr("class", "links")
            .selectAll("line")
            .data(links)
            .enter()
            .append("line")
            .attr("class", "link")
            .attr("stroke", "#666")
            .attr("stroke-opacity", 0.4)
            .attr("stroke-width", 1.2)
            .attr("stroke-dasharray", "4,2") // Dashed for voxel look
            .style("stroke-linecap", "square"); // Sharp edges

        // Create bubble groups for each link
        let bubbleGroups = svg.selectAll(".bubble-group")
            .data(links)
            .enter()
            .append("g")
            .attr("class", "bubble-group");

        // Add multiple bubbles per link for continuous flow
        bubbleGroups.each(function(d, i) {
            const group = d3.select(this);
            const numBubbles = d.type === 'synonym' ? 3 : 2;
            
            for (let j = 0; j < numBubbles; j++) {
                group.append("circle")
                    .attr("class", "bubble")
                    .attr("r", d.type === 'synonym' ? 4 : 3)
                    .attr("fill", d.type === 'synonym' ? "#ffff00" : "#ffffff")
                    .attr("opacity", d.type === 'synonym' ? 0.9 : 0.7)
                    .style("filter", d.type === 'synonym' ? 
                        "drop-shadow(0 0 6px #ffff00)" : 
                        "drop-shadow(0 0 4px rgba(255,255,255,0.5))")
                    .style("animation-delay", `${j * 0.8}s`);
            }
        });

        // Add arrowheads for unidirectional synonym links
        defs.append("defs").append("marker")
            .attr("id", "arrowhead")
            .attr("viewBox", "0 -5 10 10")
            .attr("refX", 15)
            .attr("refY", 0)
            .attr("markerWidth", 6)
            .attr("markerHeight", 6)
            .attr("orient", "auto")
            .append("path")
            .attr("d", "M0,-5L10,0L0,5")
            .attr("fill", "#ffff00")
            .style("filter", "drop-shadow(0 0 2px #ffff00)");

        // Apply arrowheads to synonym links
        linkElements.filter(d => d.type === 'synonym')
            .attr("marker-end", "url(#arrowhead)");

        // Animate bubbles along the links
        function animateBubbles() {
            bubbleGroups.selectAll(".bubble")
                .transition()
                .duration(2000)
                .ease(d3.easeLinear)
                .attrTween("transform", function(d) {
                    const link = d3.select(this.parentNode).datum();
                    return function(t) {
                        if (!link.source.x || !link.target.x) return "";
                        
                        const x1 = link.source.x;
                        const y1 = link.source.y;
                        const x2 = link.target.x;
                        const y2 = link.target.y;
                        
                        // For synonym links, animate from source to target
                        // For hue links, animate both directions
                        let progress = t;
                        if (link.type === 'hue') {
                            // Create back-and-forth movement for hue connections
                            progress = t < 0.5 ? t * 2 : (1 - t) * 2;
                        }
                        
                        const x = x1 + (x2 - x1) * progress;
                        const y = y1 + (y2 - y1) * progress;
                        
                        return `translate(${x}, ${y})`;
                    };
                })
                .on("end", function() {
                    // Restart animation for continuous flow
                    d3.select(this).attr("transform", "translate(0,0)");
                });
        }

        // Start bubble animation
        function startBubbleAnimation() {
            animateBubbles();
            setInterval(animateBubbles, 2200); // Slight delay to create continuous flow
        }

        // Create nodes with voxel style
        let nodeElements = svg.selectAll(".node")
            .data(nodes)
            .enter()
            .append("g")
            .attr("class", "node")
            .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended));

        // Create computational nodes with complex 3D voxel design
        nodeElements.each(function(d, i) {
            const node = d3.select(this);
            const baseSize = d.size || 18; // Slightly larger base size for more detail
            const group = node.append("g")
                .attr("class", "computational-node")
                .style("cursor", "pointer");
            
            // Create base voxel structure with multiple layers
            const createVoxelLayer = (x, y, size, color, depth) => {
                const layer = group.append("g")
                    .attr("class", `voxel-layer depth-${depth}`)
                    .attr("transform", `translate(${x}, ${y})`);
                
                // Base shape with subtle rotation for computational feel
                layer.append("rect")
                    .attr("width", size)
                    .attr("height", size)
                    .attr("rx", 1)
                    .attr("ry", 1)
                    .style("fill", color)
                    .style("stroke", "rgba(255,255,255,0.8)")
                    .style("stroke-width", 0.5)
                    .style("filter", `url(#voxel-shadow-${depth})`);
                
                // Add computational grid pattern
                const gridSize = size / 4;
                for (let gx = 0; gx < 4; gx++) {
                    for (let gy = 0; gy < 4; gy++) {
                        if ((gx + gy) % 2 === 0) continue; // Skip every other cell
                        layer.append("rect")
                            .attr("x", gx * gridSize)
                            .attr("y", gy * gridSize)
                            .attr("width", gridSize - 0.5)
                            .attr("height", gridSize - 0.5)
                            .style("fill", "rgba(255,255,255,0.1)")
                            .style("stroke", "none");
                    }
                }
                
                return layer;
            };
            
            // Create multiple layers for 3D effect
            const mainVoxel = createVoxelLayer(-baseSize/2, -baseSize/2, baseSize, d.hex, 1);
            
            // Add secondary voxel elements for computational look
            const secondarySize = baseSize * 0.6;
            createVoxelLayer(
                baseSize * 0.2, 
                -baseSize * 0.8, 
                secondarySize, 
                d3.color(d.hex).brighter(0.4),
                2
            );
            
            // Add small indicator lights
            const indicatorSize = baseSize * 0.15;
            for (let i = 0; i < 3; i++) {
                group.append("circle")
                    .attr("cx", -baseSize/2 + (i * indicatorSize * 1.5) + indicatorSize)
                    .attr("cy", baseSize/2 - indicatorSize/2)
                    .attr("r", indicatorSize/2)
                    .style("fill", i === 0 ? "#4CAF50" : i === 1 ? "#FFC107" : "#F44336")
                    .style("opacity", 0.8)
                    .style("filter", "url(#glow)")
                    .style("mix-blend-mode", "screen");
            }
            
            // Add emoji element (initially hidden)
            const emoji = group.append("text")
                .attr("class", "node-emoji")
                .attr("text-anchor", "middle")
                .attr("dy", "0.35em")
                .attr("font-size", baseSize * 0.7)
                .style("opacity", 0)
                .style("pointer-events", "none")
                .style("transition", "all 0.4s cubic-bezier(0.4, 0, 0.2, 1)")
                .style("transform", "scale(0.5)")
                .style("filter", "drop-shadow(0 2px 4px rgba(0,0,0,0.3))")
                .text(d => d.emoji || '✨');
            
            // Interactive elements
            group.on("mouseover", function(event, d) {
                // Animate main voxel
                d3.select(this).select(".voxel-layer.depth-1 rect")
                    .transition()
                    .duration(300)
                    .attr("width", baseSize * 1.1)
                    .attr("height", baseSize * 1.1)
                    .attr("x", -baseSize * 0.55)
                    .attr("y", -baseSize * 0.55);
                
                // Show tooltip
                tooltip.transition().duration(200).style("opacity", 1);
                tooltip.html(`
                    <div class="tooltip-header">
                        <span class="tooltip-emoji">${d.emoji || '✨'}</span>
                        <span class="tooltip-title">${d.name}</span>
                    </div>
                    <div class="tooltip-body">
                        <div class="tooltip-row">
                            <span class="tooltip-label">HEX:</span>
                            <span class="tooltip-value">${d.hex}</span>
                            <span class="color-swatch" style="background: ${d.hex}"></span>
                        </div>
                        <div class="tooltip-row">
                            <span class="tooltip-label">HUE:</span>
                            <span class="tooltip-value">${d.hue}°</span>
                        </div>
                        <div class="tooltip-divider"></div>
                        <div class="tooltip-section">
                            <div class="tooltip-subtitle">SYNONYMS</div>
                            <div class="tooltip-tags">
                                ${d.synonyms.map(s => `<span class="tag">${s}</span>`).join('')}
                            </div>
                        </div>
                        <div class="tooltip-section">
                            <div class="tooltip-subtitle">EXAMPLES</div>
                            <div class="tooltip-tags">
                                ${d.examples.slice(0, 3).map(e => `<span class="tag">${e}</span>`).join('')}
                            </div>
                        </div>
                    </div>
                `)
                .style("left", (event.pageX + 15) + "px")
                .style("top", (event.pageY - 15) + "px");
                
                // Show emoji with animation
                emoji
                    .style("opacity", 1)
                    .style("transform", "scale(1.3) translateY(-15px)");
                
                // Animate indicator lights
                d3.select(this).selectAll("circle")
                    .transition()
                    .duration(200)
                    .attr("r", indicatorSize/1.5)
                    .style("opacity", 1);
            })
            .on("mouseout", function() {
                // Reset main voxel
                d3.select(this).select(".voxel-layer.depth-1 rect")
                    .transition()
                    .duration(300)
                    .attr("width", baseSize)
                    .attr("height", baseSize)
                    .attr("x", -baseSize/2)
                    .attr("y", -baseSize/2);
                
                tooltip.transition().duration(200).style("opacity", 0);
                
                // Hide emoji with animation
                emoji
                    .style("opacity", 0)
                    .style("transform", "scale(0.5) translateY(0)");
                
                // Reset indicator lights
                d3.select(this).selectAll("circle")
                    .transition()
                    .duration(200)
                    .attr("r", indicatorSize/2)
                    .style("opacity", 0.8);
            })
            .on("mousemove", function(event) {
                tooltip
                    .style("left", (event.pageX + 15) + "px")
                    .style("top", (event.pageY - 15) + "px");
            });
        });
        
        // Add filters for voxel shadows and glows
        const createVoxelFilter = (id, dx, dy, stdDev, opacity, blur = 0) => {
            const filter = defs.append("filter")
                .attr("id", `voxel-shadow-${id}`)
                .attr("width", "200%")
                .attr("height", "200%")
                .attr("x", "-50%")
                .attr("y", "-50%");
                
            filter.append("feDropShadow")
                .attr("dx", dx)
                .attr("dy", dy)
                .attr("stdDeviation", stdDev)
                .attr("flood-opacity", opacity);
                
            if (blur > 0) {
                filter.append("feGaussianBlur")
                    .attr("stdDeviation", blur)
                    .attr("result", "blur");
            }
            
            return filter;
        };
        
        // Create multiple depth levels of shadows
        createVoxelFilter(1, 1, 1, 1.5, 0.2);
        createVoxelFilter(2, 2, 2, 2, 0.3);
        
        // Add glow filter for indicators
        const glowFilter = defs.append("filter")
            .attr("id", "glow")
            .attr("width", "300%")
            .attr("height", "300%")
            .attr("x", "-100%")
            .attr("y", "-100%");
            
        glowFilter.append("feGaussianBlur")
            .attr("stdDeviation", 2)
            .attr("result", "blur");
            
        glowFilter.append("feComposite")
            .attr("in", "SourceGraphic")
            .attr("in2", "blur")
            .attr("operator", "over");
            
        // Update tooltip style for voxel theme
        tooltip.style("border-radius", "4px")

        // Add labels with computational style
        nodeElements.append("text")
            .text(d => d.name)
            .attr("text-anchor", "middle")
            .attr("dy", 45) // Position below the larger nodes
            .attr("font-size", "10px")
            .attr("fill", "#444")
            .attr("font-weight", "600")
            .style("text-transform", "uppercase")
            .style("letter-spacing", "0.5px")
            .style("font-family", "'Courier New', monospace")
            .style("background", "rgba(255,255,255,0.8)")
            .style("padding", "2px 6px")
            .style("border-radius", "3px")
            .style("box-shadow", "0 1px 3px rgba(0,0,0,0.1)")
            .style("pointer-events", "none");

        // Update positions on simulation tick
        simulation.on("tick", () => {
            linkElements
                .attr("x1", d => d.source.x)
                .attr("y1", d => d.source.y)
                .attr("x2", d => d.target.x)
                .attr("y2", d => d.target.y);

            nodeElements
                .attr("transform", d => `translate(${d.x},${d.y})`);
            
            // Update bubble positions to follow the links
            bubbleGroups.attr("transform", d => `translate(0,0)`);
        });

        // Drag functions
        function dragstarted(event, d) {
            if (!event.active) simulation.alphaTarget(0.3).restart();
            d.fx = d.x;
            d.fy = d.y;
        }

        function dragged(event, d) {
            d.fx = event.x;
            d.fy = event.y;
        }

        function dragended(event, d) {
            if (!event.active) simulation.alphaTarget(0);
            d.fx = null;
            d.fy = null;
        }

        // Control functions
        function restartSimulation() {
            simulation.alpha(1).restart();
        }

        function toggleLabels() {
            const labels = d3.selectAll('.node text');
            const isVisible = labels.style('display') !== 'none';
            labels.style('display', isVisible ? 'none' : 'block');
        }

        function toggleLinks() {
            const links = d3.selectAll('line');
            const isVisible = links.style('opacity') !== '0';
            links.style('opacity', isVisible ? 0 : 0.6);
        }

        // Add some initial animation
        setTimeout(() => {
            nodeElements.selectAll("circle")
                .transition()
                .duration(2000)
                .ease(d3.easeElastic)
                .attr("r", 20);
            
            // Start bubble animations after nodes are settled
            setTimeout(startBubbleAnimation, 1000);
        }, 500);
    </script>
    <script src="cellular-painting.js"></script>
    <script>
        // Toggle node labels visibility
        function toggleLabels() {
            const labels = d3.selectAll('.node text');
            const isVisible = labels.style('display') !== 'none';
            labels.style('display', isVisible ? 'none' : 'block');
        }
        
        // Toggle links visibility
        function toggleLinks() {
            const links = d3.selectAll('line');
            const isVisible = links.style('opacity') !== '0';
            links.style('opacity', isVisible ? 0 : 0.6);
        }
        
        // Initialize mobile menu
        document.addEventListener('DOMContentLoaded', function() {
            const menuButton = document.getElementById('menuButton');
            const dropdownContent = document.getElementById('dropdownContent');
            
            menuButton.addEventListener('click', function() {
                dropdownContent.style.display = dropdownContent.style.display === 'block' ? 'none' : 'block';
            });
            
            // Close dropdown when clicking outside
            document.addEventListener('click', function(event) {
                if (!event.target.matches('.menu-button') && !event.target.matches('.menu-button *')) {
                    dropdownContent.style.display = 'none';
                }
            });
        });
    </script>
</body>
</html>